# -*- coding: utf-8 -*-
"""Countdown Solver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wPE92vsnpsSHYsDZJCpfML2htlbWC05Z
"""

import itertools

def evaluate_expression(exp, target):
    result = exp[0]
    for i in range(1, len(exp), 2):
        operator, operand = exp[i], exp[i+1]
        if operator == '/':
            if operand == 0 or result % operand != 0:
                return None
            result //= operand
        elif operator == '*':
            result *= operand
        elif operator == '+':
            result += operand
        elif operator == '-':
            result -= operand
    return result if result == target else None

def countdown():
    numbers = list(map(int, input("Enter the six numbers, separated by spaces: ").split()))
    target = int(input("Enter the target number: "))
    ops = ['+', '-', '*', '/']
    expressions = []

    for n in range(2, 7):
        for seq in itertools.permutations(numbers, n):
            for opseq in itertools.product(ops, repeat=n-1):
                exp = list(itertools.chain(*zip(seq, opseq)))[:-1]
                result = evaluate_expression(exp, target)
                if result is not None:
                    expressions.append(("".join(map(str, exp)), result))

    if expressions:
        expressions = sorted(expressions, key=lambda x: abs(x[1] - target))
        solutions = set()
        for exp, result in expressions:
            if result == target:
                solutions.add(exp)
        if solutions:
            return "The following unique solutions were found: \n" + "\n".join(solutions)
        else:
            closest = expressions[0]
            return f"No exact solutions found. The closest solution is {closest[0]} = {closest[1]}"
    else:
        return "No solution found."

print(countdown())